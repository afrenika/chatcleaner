require('dotenv').config();
const VkBot = require('node-vk-bot-api');
const fs = require('fs');

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
const forbiddenWords = JSON.parse(fs.readFileSync('forbiddenWords.json', 'utf-8'));
const trustedDomains = JSON.parse(fs.readFileSync('trusted_domains.json', 'utf-8')); // –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤

// ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º
const TARGET_GROUP_ID = 'kubik232';
// –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
const startTime = Math.floor(Date.now() / 1000);

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new VkBot(process.env.VK_TOKEN); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

// –ö—ç—à —Å–æ–æ–±—â–µ–Ω–∏–π
let messageCache = [];

// –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ (–∑–∞–º–µ–Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏)
function normalizeText(text) {
    const charMap = {
        'a': '–∞', 'b': '–≤', 'c': '—Å', 'e': '–µ', 'o': '–æ', 'p': '—Ä',
        'k': '–∫', 'x': '—Ö', 'y': '—É', 'h': '–Ω', 'm': '–º'
    };
    return text.toLowerCase().replace(/[abceopkxyhmi]/g, char => charMap[char] || char);
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫
function containsUntrustedLink(text) {
    const urlRegex = /(https?:\/\/[^\s]+)/g;
    const links = text.match(urlRegex);

    if (links) {
        return links.some(link => {
            try {
                const domain = new URL(link).hostname.replace('www.', '');
                return !trustedDomains.includes(domain);
            } catch (e) {
                return true;
            }
        });
    }
    return false;
}

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π
function logViolation(userId, message, type) {
    const logEntry = `[${new Date().toISOString()}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–ø—Ä–∞–≤–∏–ª ${type} —Å–æ–æ–±—â–µ–Ω–∏–µ: "${message}"\n`;
    fs.appendFile('violations.log', logEntry, (err) => {
        if (err) console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥:', err);
    });
}

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ —á–∞—Ç
function logInvite(group_id) {
    const logEntry = `–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç: "${group_id}"\n`;
    fs.appendFile('violations.log', logEntry, (err) => {
        if (err) console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥:', err);
    });
}

function logMessage(ctx) {
    try {
        const timestamp = new Date().toISOString();
        const userId = ctx.message.from_id;
        const peerId = ctx.message.peer_id;
        const messageText = ctx.message.text || '(–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞)';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–ª–æ–∂–µ–Ω–∏–π
        let hasAttachments = false;
        let attachmentTypes = [];

        if (ctx.message.attachments && ctx.message.attachments.length > 0) {
            hasAttachments = true;
            attachmentTypes = ctx.message.attachments.map(att => att.type);
        }

        const logEntry = `[${timestamp}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userId} –≤ –±–µ—Å–µ–¥—É ${peerId};–¢–µ–∫—Å—Ç: "${messageText}; –í–ª–æ–∂–µ–Ω–∏—è: ${hasAttachments ? '–î–∞' : '–ù–µ—Ç'};${hasAttachments ? ` (–¢–∏–ø—ã: ${attachmentTypes.join(', ')})` : ''}\n`

        fs.appendFile('messages.log', logEntry, (err) => {
            if (err) console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π:', err);
        });

    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
    }
}


// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async function deleteMessage(peerId, messageId) {
    try {
        await bot.execute('messages.delete', {
            conversation_message_ids: messageId,
            peer_id: peerId,
            delete_for_all: 1,
        });
        console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ ${messageId} —É–¥–∞–ª–µ–Ω–æ.`);
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}:`, err);
    }
}

async function kickUser(peerId, userId) {
    try {
        await bot.execute('messages.removeChatUser', {
            chat_id: peerId - 2000000000,
            member_id: userId
        });
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –±–µ—Å–µ–¥—ã ${peerId}.`);
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, err);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ü–µ–ª–µ–≤–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ
async function isGroupMember(userId) {

    try {
        const response = await bot.execute('groups.isMember', {
            group_id: TARGET_GROUP_ID,
            user_id: userId,
        });

        return response;
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã ${userId}:`, err);
        return true; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ conversation_message_id
async function getMessageText(peerId, messageId) {
    try {
        const response = await bot.execute('messages.getByConversationMessageId', {
            peer_id: peerId,
            conversation_message_ids: messageId,
        });

        if (response.items.length > 0) {
            return response.items[0].text;
        }
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}:`, err);
    }
    return null;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫—ç—à–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
setInterval(async () => {
    console.log('–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ...');

    for (let i = messageCache.length - 1; i >= 0; i--) {
        const msg = messageCache[i];

        const messageText = await getMessageText(msg.peer_id, msg.id);

        if (messageText) {
            const normalizedText = normalizeText(messageText);
            const hasForbiddenWord = forbiddenWords.some(word => normalizedText.includes(word));
            const hasUntrustedLink = containsUntrustedLink(messageText);

            if (hasForbiddenWord || hasUntrustedLink) {
                console.log(`–ù–∞—Ä—É—à–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ${msg.id}:`, messageText);
                await deleteMessage(msg.peer_id, msg.id);
                await kickUser(msg.peer_id, msg.from_id);
                messageCache.splice(i, 1);
            }
        }
    }
}, 10000);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on(async (ctx) => {
    const messageTime = ctx.message.date; // –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (messageTime < startTime) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–µ—Å–µ–¥—É
    if (ctx.message.action && ctx.message.action.type === 'chat_invite_user') {
        const userId = ctx.message.action.member_id; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–æ–±–∞–≤–∏–ª–∏
        const chatId = ctx.message.peer_id; // ID –±–µ—Å–µ–¥—ã

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –∏–º–µ–Ω–Ω–æ –±–æ—Ç–∞
        if (userId === -ctx.groupId) {
            await bot.execute('messages.send', {
                chat_id: chatId - 2000000000, // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º peer_id –≤ chat_id
                message: '–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∑—å—è!\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è –≤ –±–µ—Å–µ–¥—É! üòä\n–Ø –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º –∏ —É–¥–∞–ª—è—Ç—å —Ç–µ—Ö, –∫—Ç–æ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ, –∞ —Ç–∞–∫–∂–µ —É–¥–∞–ª—è—Ç—å —Å–ø–∞–º, –µ—Å–ª–∏ –≤—ã–¥–∞–¥–∏—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!',
                random_id: Math.floor(Math.random() * 1e9), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            });
            logInvite(chatId);
        } else if (userId > 0) { // –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª–∏ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const isMember = await isGroupMember(userId);
            if (!isMember) {
                console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ ${TARGET_GROUP_ID}`);
                await kickUser(chatId, userId);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—á–∏–Ω–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                await bot.execute('messages.send', {
                    chat_id: chatId - 2000000000,
                    message: `@id${userId} (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ.`,
                    random_id: Math.floor(Math.random() * 1e9),
                });
            }
        }
    }
    logMessage(ctx);
    // –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    if (ctx.message.text && ctx.message.conversation_message_id) {
        const normalizedText = normalizeText(ctx.message.text);
        const hasForbiddenWord = forbiddenWords.some(word => normalizedText.includes(word));
        const hasUntrustedLink = containsUntrustedLink(ctx.message.text);

        if (hasForbiddenWord || hasUntrustedLink) {
            console.log('–ù–∞—Ä—É—à–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:', ctx.message.text);
            logViolation(ctx.message.from_id, ctx.message.text, hasUntrustedLink ? '–Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞' : '–∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ');

            await deleteMessage(ctx.message.peer_id, ctx.message.conversation_message_id);
            await kickUser(ctx.message.peer_id, ctx.message.from_id);
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫—ç—à
        messageCache.push({
            id: ctx.message.conversation_message_id,
            peer_id: ctx.message.peer_id,
            from_id: ctx.message.from_id
        });

        // –ï—Å–ª–∏ –∫—ç—à –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50 —Å–æ–æ–±—â–µ–Ω–∏–π, —É–¥–∞–ª—è–µ–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ
        if (messageCache.length > 50) {
            const removedMessage = messageCache.shift();
            console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ ${removedMessage.id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫—ç—à–∞.`);
        }
    }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.startPolling((err) => {
    if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', err);
    } else {
        console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...');
    }
});